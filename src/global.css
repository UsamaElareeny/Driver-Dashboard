/* globals.css (or whatever your main CSS where you import Tailwind) */

@import "tailwindcss";

/* Tailwind v4 CSS-first theme variables */
@theme {
  /* Dark mode via class */
  /* Tailwind v4 defaults dark mode to class (similar) so you may not need extra config. */

  /* Container settings */
  --container-center: true;
  --container-padding: 2rem;
  --breakpoint-2xl: 1400px;

  /* Colors */
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-background-secondary: hsl(var(--background-secondary));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-light: hsl(var(--primary-light));
  --color-primary-dark: hsl(var(--primary-dark));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-light: hsl(var(--secondary-light));
  --color-secondary-dark: hsl(var(--secondary-dark));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-success: hsl(var(--success));
  --color-success-light: hsl(var(--success-light));
  --color-success-foreground: hsl(var(--success-foreground));

  --color-warning: hsl(var(--warning));
  --color-warning-light: hsl(var(--warning-light));
  --color-warning-foreground: hsl(var(--warning-foreground));

  --color-danger: hsl(var(--danger));
  --color-danger-light: hsl(var(--danger-light));
  --color-danger-foreground: hsl(var(--danger-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-secondary: hsl(var(--card-secondary));
  --color-card-foreground: hsl(var(--card-foreground));

  /* Sidebar group */
  --color-sidebar-background: hsl(var(--sidebar-background));
  --color-sidebar-foreground: hsl(var(--sidebar-foreground));
  --color-sidebar-primary: hsl(var(--sidebar-primary));
  --color-sidebar-primary-foreground: hsl(var(--sidebar-primary-foreground));
  --color-sidebar-accent: hsl(var(--sidebar-accent));
  --color-sidebar-accent-foreground: hsl(var(--sidebar-accent-foreground));
  --color-sidebar-border: hsl(var(--sidebar-border));
  --color-sidebar-ring: hsl(var(--sidebar-ring));

  /* Border radius */
  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  /* Animations & keyframes */
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  --animate-fade-in: fade-in 0.3s ease-out;
  --animate-slide-up: slide-up 0.4s ease-out;
  --animate-scale-in: scale-in 0.2s ease-out;
  --animate-bounce-in: bounce-in 0.6s ease-out;
  --animate-pulse-slow: pulse-slow 2s ease-in-out infinite;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
  @keyframes fade-in {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  @keyframes slide-up {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  @keyframes scale-in {
    0% {
      opacity: 0;
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
  @keyframes bounce-in {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
  @keyframes pulse-slow {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
}

/* If you need dark mode class behavior, maybe use a custom variant */
/* Tailwind v4 docs show how to use dark mode via class */
/* You can also define a custom variant if needed, like: @custom-variant dark (&:where(.dark, .dark *));  */

@layer base {
  /* You might define any base global styles here if needed */
}
